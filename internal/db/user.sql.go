// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, phone, email)
VALUES ($1, $2, $3) RETURNING id, name, phone ,email, created_at
`

type CreateUserParams struct {
	Name  string
	Phone pgtype.Text
	Email string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Phone, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, phone, email, created_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, phone, email, created_at
FROM users
ORDER BY created_at DESC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersWithProducts = `-- name: ListUsersWithProducts :many
SELECT
    u.id as user_id,
    u.name as user_name,
    u.phone as user_phone,
    u.email as user_email,
    u.created_at as user_created_at,
    p.id as product_id,
    p.name as product_name,
    p.description as product_description,
    p.price as product_price,
    p.created_at as product_created_at,
    p.updated_at as product_updated_at
FROM users u
LEFT JOIN products p ON u.id = p.user_id
ORDER BY u.created_at DESC, p.created_at DESC
`

type ListUsersWithProductsRow struct {
	UserID             int32
	UserName           string
	UserPhone          pgtype.Text
	UserEmail          string
	UserCreatedAt      pgtype.Timestamptz
	ProductID          pgtype.Int4
	ProductName        pgtype.Text
	ProductDescription pgtype.Text
	ProductPrice       pgtype.Numeric
	ProductCreatedAt   pgtype.Timestamptz
	ProductUpdatedAt   pgtype.Timestamptz
}

func (q *Queries) ListUsersWithProducts(ctx context.Context) ([]ListUsersWithProductsRow, error) {
	rows, err := q.db.Query(ctx, listUsersWithProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersWithProductsRow
	for rows.Next() {
		var i ListUsersWithProductsRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.UserPhone,
			&i.UserEmail,
			&i.UserCreatedAt,
			&i.ProductID,
			&i.ProductName,
			&i.ProductDescription,
			&i.ProductPrice,
			&i.ProductCreatedAt,
			&i.ProductUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
