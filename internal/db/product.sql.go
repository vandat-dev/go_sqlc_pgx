// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, description, price, user_id)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, price, user_id, created_at, updated_at
`

type CreateProductParams struct {
	Name        string
	Description pgtype.Text
	Price       pgtype.Numeric
	UserID      int32
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.UserID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, description, price, user_id, created_at, updated_at
FROM products
WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductWithUserByID = `-- name: GetProductWithUserByID :one
SELECT 
    p.id,
    p.name,
    p.description,
    p.price,
    p.user_id,
    p.created_at,
    p.updated_at,
    u.name as user_name,
    u.email as user_email,
    u.phone as user_phone
FROM products p
INNER JOIN users u ON p.user_id = u.id
WHERE p.id = $1
`

type GetProductWithUserByIDRow struct {
	ID          int32
	Name        string
	Description pgtype.Text
	Price       pgtype.Numeric
	UserID      int32
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	UserName    string
	UserEmail   string
	UserPhone   pgtype.Text
}

func (q *Queries) GetProductWithUserByID(ctx context.Context, id int32) (GetProductWithUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getProductWithUserByID, id)
	var i GetProductWithUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
		&i.UserEmail,
		&i.UserPhone,
	)
	return i, err
}

const getProductsByUserID = `-- name: GetProductsByUserID :many
SELECT id, name, description, price, user_id, created_at, updated_at
FROM products
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetProductsByUserID(ctx context.Context, userID int32) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, description, price, user_id, created_at, updated_at
FROM products
ORDER BY created_at DESC
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsWithUsers = `-- name: ListProductsWithUsers :many
SELECT 
    p.id,
    p.name,
    p.description,
    p.price,
    p.user_id,
    p.created_at,
    p.updated_at,
    u.name as user_name,
    u.email as user_email,
    u.phone as user_phone
FROM products p
INNER JOIN users u ON p.user_id = u.id
ORDER BY p.created_at DESC
`

type ListProductsWithUsersRow struct {
	ID          int32
	Name        string
	Description pgtype.Text
	Price       pgtype.Numeric
	UserID      int32
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	UserName    string
	UserEmail   string
	UserPhone   pgtype.Text
}

func (q *Queries) ListProductsWithUsers(ctx context.Context) ([]ListProductsWithUsersRow, error) {
	rows, err := q.db.Query(ctx, listProductsWithUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProductsWithUsersRow
	for rows.Next() {
		var i ListProductsWithUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserName,
			&i.UserEmail,
			&i.UserPhone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = $2, description = $3, price = $4, updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, price, user_id, created_at, updated_at
`

type UpdateProductParams struct {
	ID          int32
	Name        string
	Description pgtype.Text
	Price       pgtype.Numeric
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
